/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package reversible;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.Random;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import java.awt.image.Raster;
import java.util.Arrays;
import java.awt.Graphics2D;

import ij.ImagePlus;
import ij.process.ImageProcessor;

/**
 *
 * @author admin
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    Details dt=new Details();
    String path;
    
    public MainFrame() {
        initComponents();
        deleteImage("patch");
        deleteImage("Sourcepatch");
    }

    public void deleteImage(String fn)
    {
        try
        {
            File fe1=new File(fn);
            File lt1[]=fe1.listFiles();
            for(int i=0;i<lt1.length;i++)
                lt1[i].delete();
            
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 30)); // NOI18N
        jLabel1.setText("Reversible Texture Steganography - Message Embedding");

        jLabel2.setFont(new java.awt.Font("Andalus", 0, 18)); // NOI18N
        jLabel2.setText("Choose Source Texture");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Andalus", 0, 17)); // NOI18N

        jButton1.setFont(new java.awt.Font("Andalus", 0, 17)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Andalus", 0, 17)); // NOI18N
        jButton2.setText("Index Table Generation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel2)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(326, 326, 326)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel1)))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(37, 37, 37)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButton2)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fc=new JFileChooser();
            int ch=fc.showOpenDialog(this);
            if(ch==JFileChooser.APPROVE_OPTION)
            {
                String pp=fc.getSelectedFile().getAbsolutePath();
                jTextField1.setText(pp);
                
                BufferedImage bi=ImageIO.read(new File(pp));
                path=pp;
                int h=bi.getHeight();
                int w=bi.getWidth();
                
                dt.Sw=w;
                dt.Sh=h;
                
                if(h==w && h>=96)
                {
                    ImageIcon ic=new ImageIcon(pp);
                    jLabel3.setIcon(ic);
                }
                else
                    JOptionPane.showMessageDialog(this, "Image Height = Width && Size > 96");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            String pp=jTextField1.getText().trim();
            if(pp.equals(""))
            {
                JOptionPane.showMessageDialog(this,"Select Texture Image");
            }
            else
            {
                int TPn1 = (int) Math.floor(((dt.Tw-dt.Pw)/(dt.Pw-dt.Pd))+1)*(int)Math.floor(((dt.Th-dt.Ph)/(dt.Ph-dt.Pd))+1);
                System.out.println("TPn = "+TPn1);
                dt.Tpw=(int)Math.sqrt(TPn1);
                dt.Tph=(int)Math.sqrt(TPn1);
                dt.TPn=TPn1;
                System.out.println("Tpw * Tph = "+dt.Tpw+" * "+dt.Tph);
            
                double tL1=Math.ceil((dt.Tpw-2)/2)*Math.ceil((dt.Tph-2)/2);
                
                double tL2=Math.floor((dt.Tpw-2)/2)*Math.floor((dt.Tph-2)/2);
            
                int L1=(int)Math.round(tL1);
                int L2=(int)Math.round(tL2);
                System.out.println("L1 "+L1);
                System.out.println("L2 "+L2);
            
                int SPn1=(dt.Sw/dt.Kw)*(dt.Sh/dt.Kh);
                dt.CPn=(dt.Sw-dt.Pw+1)*(dt.Sh-dt.Ph+1);
                System.out.println("No of Source Patches "+SPn1);
                System.out.println("CPn "+dt.CPn);
                
                dt.Spn=SPn1;
                
                if(SPn1<=L1)
                {
                    for(int i=0;i<SPn1;i++)
                    {
                        Random rn=new Random();
                        int id=rn.nextInt(dt.TPn);
                        if(!dt.PatchID.contains(id))
                        {
                            if((!dt.PatchID.contains(id+1)) && (!dt.PatchID.contains(id-1)) && (!dt.PatchID.contains(id-dt.Tpw)) && (!dt.PatchID.contains(id+dt.Tpw)) && (!dt.PatchID.contains(id+dt.Tpw+1) && (!dt.PatchID.contains(id-dt.Tpw+1)) && (!dt.PatchID.contains(id-dt.Tpw-1))&& (!dt.PatchID.contains(id+(dt.Tpw-1)))))
                                dt.PatchID.add(id);
                            else
                                i--;
                        }
                        else
                            i--;
                    
                    }
                }
                else
                {
                    for(int i=0;i<SPn1;i++)
                    {
                        Random rn=new Random();
                        int id=rn.nextInt(dt.TPn);
                        if(!dt.PatchID.contains(id))
                        {
                            if((!dt.PatchID.contains(id+1)) && (!dt.PatchID.contains(id-1)) && (!dt.PatchID.contains(id+dt.Tpw)) && (!dt.PatchID.contains(id-dt.Tpw)) && (!dt.PatchID.contains(id+dt.Tpw+1)))
                                dt.PatchID.add(id);
                            else
                                i--;
                        }
                        else
                            i--;
                    
                    }
                }
                
                dt.BPPmax=Math.floor(Math.log((dt.Sw-dt.Pw+1)*(dt.Sh-dt.Ph+1)));
                System.out.println("BPP "+dt.BPPmax);
                
               int Spn2=(dt.Sw/(dt.Pw-(2*dt.Pd)))*((dt.Sh/(dt.Ph-(2*dt.Pd))));
               System.out.println("Spn2 "+Spn2);
               int tpn2=(((dt.Tw-dt.Pw)/(dt.Pw-dt.Pd))+1)*(((dt.Th-dt.Ph)/(dt.Ph-dt.Pd))+1);
               System.out.println("tpn1 "+tpn2);
               int Epn=tpn2-Spn2;
               System.out.println("Epn "+Epn);
               double TC= Epn*dt.BPPmax;
               System.out.println("TC "+TC);
                
                System.out.println("Patch ID "+dt.PatchID);
                
                
                
                  // Patch Generation
                            
              
                
                File file = new File(pp);
                FileInputStream fis2 = new FileInputStream(file);   
		BufferedImage image = ImageIO.read(fis2); 
                
                int rows = (int)Math.sqrt(dt.Spn); 
		int cols = (int)Math.sqrt(dt.Spn);   
		int chunks = rows * cols;   
		int chunkWidth = image.getWidth() / cols; 
		int chunkHeight = image.getHeight() / rows;   
		int count = 0;   
		BufferedImage imgs[] = new BufferedImage[chunks]; 
                int h=1;
		for (int x = 0; x < rows; x++) 
		{   
                    int k=1;
                    for (int y = 0; y < cols; y++) 
                    {   
			imgs[count] = new BufferedImage(chunkWidth, chunkHeight, image.getType());   
			Graphics2D gr = imgs[count].createGraphics();   
			gr.drawImage(image, 0, 0, chunkWidth, chunkHeight, chunkWidth * y, chunkHeight * x, chunkWidth * y + chunkWidth, chunkHeight * x + chunkHeight, null);   
			//System.out.println("=== "+(chunkWidth * y)+" : "+(chunkHeight * x)+" : "+(chunkWidth * y + chunkWidth)+" : "+(chunkHeight * x + chunkHeight));	
			gr.dispose();   
                        //ImageIO.write(imgs[count],"jpg",new File("patch//b"+h+"_"+k+".jpg"));
                        int a1=dt.PatchID.get(count);
                        int a2=dt.PatchID.indexOf(a1);
                        ImageIO.write(imgs[count],"jpg",new File("patch//b"+a2+".jpg"));
                        //ImageIO.write(imgs[count],"jpg",new File("patch//b"+count+".jpg"));
			k=k+1;
                        count++;
                    }   
                     h=h+1;
                    dt.blockj=k;
		}  
		dt.blocki=h;
                
                
                IndexTableFrame itf=new IndexTableFrame(this);
                
                int m11=0;
                int kk=0;
                for(int i=0;i<dt.Tpw;i++)
                {
                    int m2=0;
                    for(int j=0;j<dt.Tph;j++)
                    {
                        
                        JLabel lb1=new JLabel();
                        System.out.println(i+" : "+j+" : "+kk);
                        if(dt.PatchID.contains(kk))
                        {
                            System.out.println("================");
                            lb1.setText(String.valueOf(dt.PatchID.indexOf(kk)));
                            lb1.setForeground(Color.red);
                        }
                        else
                            lb1.setText("-1");
                            //lb1.setText(String.valueOf(kk));
                            
                        lb1.setBounds(m2, m11, 32,32);
                        //lb1.setBounds(m11, m2, 32,32);
                        itf.jPanel2.add(lb1);
                        m2=m2+32+3;
                        kk++;
                    }
                    m11=m11+32+3;
                }
            
                System.out.println("kk "+kk);
                
                itf.setVisible(true);
                itf.setResizable(false);
                itf.setTitle("Index Table");
                
                
                
              
		
            }
            
            
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
